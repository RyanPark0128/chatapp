[{"/Users/support/web-development/chatapp/src/App.js":"1","/Users/support/web-development/chatapp/src/index.js":"2"},{"size":4110,"mtime":1606256552758,"results":"3","hashOfConfig":"4"},{"size":197,"mtime":1606180482382,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"ruh9by",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/support/web-development/chatapp/src/App.js",["11","12"],"import React from 'react';\nimport { useState, useRef } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport './App.css';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n  // config\n  apiKey: \"AIzaSyDMt1FTJpotoKCZmeZEvKIz1FRUfMDfR4Q\",\n  authDomain: \"chatapp-8588d.firebaseapp.com\",\n  databaseURL: \"https://chatapp-8588d.firebaseio.com\",\n  projectId: \"chatapp-8588d\",\n  storageBucket: \"chatapp-8588d.appspot.com\",\n  messagingSenderId: \"40495559035\",\n  appId: \"1:40495559035:web:32f4200f0473b22326cdde\",\n  measurementId: \"G-0JX7M6Z06V\"\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"backgroundColor\">\n      <div>\n        {user ? <ChatRoom /> : <SignIn />}\n      </div>\n    </div>\n  );\n}\n\nfunction SignIn() {\n\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    <div className=\"background\">\n      <img className=\"main-image\"src=\"https://cdn.iconscout.com/icon/free/png-512/chatbox-457904.png\" alt=\"chat\" />\n      <h1> Simple Chat App</h1>\n      <div>\n        <a class=\"btn btn-outline-dark\" onClick={signInWithGoogle} role=\"button\" style={{ textTransform: 'none' }}>\n          <img width=\"20px\" style={{ marginBottom: '3px', marginRight: '5px' }} alt=\"Google sign-in\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Google_%22G%22_Logo.svg/512px-Google_%22G%22_Logo.svg.png\" />\n          Login with Google\n          </a>\n      </div>\n    </div>\n    // <div class=\"ui animated button\" style={{float:'right'}} onClick={signInWithGoogle}>\n    //   <div class=\"visible content\">Sign In</div>\n    //   <div class=\"hidden content\">\n    //     <i class=\"right arrow icon\"></i>\n    //   </div>\n    // </div>\n  )\n\n}\n\nfunction SignOut() {\n  return auth.currentUser && (\n    <div className=\"signout\">\n      <button onClick={() => auth.signOut()} tabindex=\"0\" className=\"ui inverted basic button\">Sign Out</button>\n    </div>\n  )\n}\n\n\nfunction ChatRoom() {\n  const dummy = useRef();\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt')\n  const [messages] = useCollectionData(query, { idField: 'id' });\n  const [formValue, setFormValue] = useState('');\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n    if (formValue.length < 1) {\n      return\n    } else {\n\n      const { uid, photoURL } = auth.currentUser;\n  \n      await messagesRef.add({\n        text: formValue,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        uid,\n        photoURL\n      })\n  \n      setFormValue('');\n      dummy.current.scrollIntoView({ behavior: 'smooth' });\n    }\n\n  }\n\n  return (\n      <div className=\"chatroom\">\n        <header className=\"header\">\n          <div className=\"header-container\">\n            <p className=\"title\">SimpleChatApp</p>\n            <SignOut />\n          </div>\n        </header>\n        <div className=\"fill\">\n\n        </div>\n        <main className=\"content\">\n\n          {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n          <span ref={dummy}></span>\n\n        </main>\n\n        <form onSubmit={sendMessage}>\n\n          <input value={formValue} onChange={(e) => setFormValue(e.target.value)} />\n          <button id=\"sub-button\" className=\"ui yellow button\" type=\"submit\" >Send</button>\n\n        </form>\n        <div className=\"bottomFill\">\n\n        </div>\n      </div>\n  )\n}\n\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (<div className=\"message-container\">\n    <div className={`message ${messageClass}`}>\n      <img className=\"messagebox\" src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} />\n      <p>{text}</p>\n    </div>\n  </div>)\n}\n\n\nexport default App;\n","/Users/support/web-development/chatapp/src/index.js",[],{"ruleId":"13","severity":1,"message":"14","line":52,"column":9,"nodeType":"15","endLine":52,"endColumn":116},{"ruleId":"16","severity":1,"message":"17","line":145,"column":7,"nodeType":"15","endLine":145,"endColumn":111},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images."]