[{"/Users/support/web-development/chatapp/src/App.js":"1","/Users/support/web-development/chatapp/src/index.js":"2"},{"size":4024,"mtime":1608005178613,"results":"3","hashOfConfig":"4"},{"size":197,"mtime":1606180482382,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"ruh9by",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/support/web-development/chatapp/src/App.js",["11","12"],"import React from 'react';\nimport { useState, useRef, useEffect } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport './App.css';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n  // config\n  apiKey: \"AIzaSyDMt1FTJpotoKCZmeZEvKIz1FRUfMDfR4Q\",\n  authDomain: \"chatapp-8588d.firebaseapp.com\",\n  databaseURL: \"https://chatapp-8588d.firebaseio.com\",\n  projectId: \"chatapp-8588d\",\n  storageBucket: \"chatapp-8588d.appspot.com\",\n  messagingSenderId: \"40495559035\",\n  appId: \"1:40495559035:web:32f4200f0473b22326cdde\",\n  measurementId: \"G-0JX7M6Z06V\"\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\n\nfunction App() {\n  const [user] = useAuthState(auth);\n\n  return (\n    <div>\n      <div id=\"bg\" alt=\"chat\" />\n      {user ? <ChatRoom /> : <SignIn />}\n    </div>\n  );\n}\n\nfunction SignIn() {\n\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    <div>\n      <div className=\"header\">\n        <div className=\"logo\">SimplyChat</div>\n        <button onClick={signInWithGoogle} className=\"signin\">Sign In</button>\n      </div>\n\n      <div className=\"contents\">\n        <div className=\"title\">\n          Chat, and have fun\n        </div>\n        <div className=\"subtitle\">\n          Simply sign in and start chatting\n        </div>\n        <div className=\"google\">\n          <div>\n            <a id=\"google-button\" className=\"btn btn-outline-dark\" onClick={signInWithGoogle} role=\"button\">\n              <img width=\"20px\" style={{ backgroundColor: \"white\", marginBottom: '3px', marginRight: '5px' }} alt=\"Google sign-in\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Google_%22G%22_Logo.svg/512px-Google_%22G%22_Logo.svg.png\" />\n              Sign In with Google\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n\n}\n\nfunction SignOut() {\n  return auth.currentUser && (\n    <button onClick={() => auth.signOut()} className=\"signin\">Sign Out</button>\n  )\n}\n\n\nfunction ChatRoom() {\n  const dummy = useRef();\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt')\n  const [messages] = useCollectionData(query, { idField: 'id' });\n  const [formValue, setFormValue] = useState('');\n\n  useEffect(() => {\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\n  });\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n    if (formValue.length < 1) {\n      return\n    } else {\n\n      const { uid, photoURL } = auth.currentUser;\n\n      await messagesRef.add({\n        text: formValue,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        uid,\n        photoURL\n      })\n\n      setFormValue('');\n      dummy.current.scrollIntoView({ behavior: 'smooth' });\n    }\n\n  }\n\n  return (\n    <div>\n      <div className=\"header\">\n        <div className=\"logo\">SimplyChat</div>\n        <SignOut />\n      </div>\n      <div className=\"chat-container\">\n\n        <div className=\"chat-room\">\n\n          {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n          <span ref={dummy}></span>\n\n        </div>\n\n        <form className=\"form\" onSubmit={sendMessage}>\n\n          <input className=\"input-text\" value={formValue} onChange={(e) => setFormValue(e.target.value)} />\n          <button className=\"submit-button\" type=\"submit\" >Send</button>\n\n        </form>\n      </div>\n    </div>\n  )\n}\n\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (<div>\n    <div className={`message ${messageClass}`}>\n      <img className=\"messagebox\" src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} />\n      <p className=\"message-text\">{text}</p>\n    </div>\n    </div>\n    )\n}\n\n\nexport default App;\n","/Users/support/web-development/chatapp/src/index.js",[],{"ruleId":"13","severity":1,"message":"14","line":61,"column":13,"nodeType":"15","endLine":61,"endColumn":109},{"ruleId":"16","severity":1,"message":"17","line":147,"column":7,"nodeType":"15","endLine":147,"endColumn":111},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images."]